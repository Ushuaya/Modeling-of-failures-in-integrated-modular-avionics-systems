Библиотека содержит следующие классы:
\begin{itemize}
\item класс \emph{Network} соответствует сети временных автоматов с остановкой таймеров. Содержит набор автоматов, каналов, переменных и таймеров, в т.ч. служебный таймер для хранения значения модельного времени. Имеет метод $run$, в результате выполнения которого формируется некоторая ВД сети автоматов. Т.к. функционирование сети автоматов, вообще говоря, может быть бесконечным, перед вызовом метода $run$ необходимо задать длительность интервала моделирования с помощью метода $setSimulationInterval$. Моделирование прекратится либо при достижении модельным временем заданного значения, либо при достижении такого состояния сети, при котором ни один переход не возможен. Также после моделирования функционирования сети автоматов может быть сформирован набор событий синхронизаций, имевших место в сети автоматов.
\item класс \emph{Automaton} соответствует одному автомату. Содержит набор локаций, позволяет получить начальную и текущую локации. Также, в процессе моделирования функционирования автомата в составе сети автоматов, в объекте класса Automaton формируется набор событий синхронизации, выполненных автоматом. 
\item класс \emph{Channel} соответствует каналу синхронизации. Класс предоставляет интерфейс для отправки и получения сигнала по каналу.
\item класс \emph{DuplexChannel} является наследником класса \emph{Channel} и соответствует каналу <<точка-точка>>.
\item класс \emph{BroadcastChannel} является наследником класса \emph{Channel} и соответствует широковещательному каналу.
\item класс \emph{Var} соответствует целочисленной переменной.
\item класс \emph{Timer} соответствует таймеру. 
\item класс \emph{Location} соответствует локации автомата. Содержит список переходов, которые могут быть выполнены из этой локации. Для локации может быть установлен признак запрета увеличения значений таймеров в случае, если эта локация является текущей для некоторого автомата. Также  класс \emph{Location} имеет виртуальный метод $inv$, возвращающий $true$ или $false$ и соответствующий инварианту локации. Кроме того, класс \emph{Location} имеет виртуальный метод $checkTimer$, возвращающий $true$, если для текущего значения переменных и данной локации значение указанного таймера может увеличиваться (т.е. таймер не является остановленным), и $false$ иначе. Согласно определениям в классе \emph{Location}, методы $inv$ и $checkTimer$ всегда возвращают $true$.
\item класс \emph{Transition} соответствует переходу в автомате. Содержит виртуальные методы $action$, $guard$, $synchronize$, соответствующие условию, действиям по изменению переменных и таймеров, действиям синхронизации, а также указатель на локацию, в которую осуществляется переход. Согласно определениям в классе \emph{Transition}, в методах $action$ и $synchronize$ отсутствуют действия, а метод $guard$ всегда возвращает $true$.
\item класс \emph{AEvent} соответствует событию синхронизации автомата и содержит указатель на канал, с использованием которого выполняется синхронизация, модельное время синхронизации, а также уникальный в рамках одного вычисления сети номер синхронизации. При этом у нескольких объектов класса \emph{AEvent}, принадлежащих разным автоматам, могут быть одинаковые номера синхронизации. Это означает, что такие объекты соответствуют одному и тому же событию синхронизации: каждый из автоматов-участников синхронизации хранит свой объект класса  \emph{AEvent}.
\item класс \emph{NetEvent} соответствует событию синхронизации в сети автоматов и содержит указатель на объект-канал, список указателей на объекты-автоматы, участвующие в синхронизации, и модельное время синхронизации.
\end{itemize}

Перечисленные классы реализуют функционирование соответствующих объектов математического аппарата сетей временных автоматов с остановкой таймеров согласно описаниям в разделах~\ref{automata_formal} и~\ref{automata-common}.

Отметим, что ВД сети автоматов представляет собой набор объектов класса \emph{NetEvent}. ВД сети автоматов формируется после моделирования функционирования этой сети автоматов посредством обработки всех наборов объектов \emph{AEvent}. Однако, при решении некоторых задач не требуется анализ всей ВД целиком, а необходима информация о событиях синхронизации лишь некоторых автоматов. Так в процессе решения задачи данной диссертационной работы, согласно разделу~\ref{algo_vd}, требуется информация о событиях синхронизации лишь автоматов-моделей функциональных задач. В то же время построение ВД сети автоматов требует дополнительных вычислительных затрат. Поэтому интерфейс библиотеки предоставляет пользователю доступ к набору событий \emph{AEvent} каждого автомата, а построение ВД всей сети автоматов выполняется посредством явного вызова метода $buildTD$ для объекта класса \emph{Network}.

Чтобы промоделировать функционирование заданной сети автоматов с использованием разработанной библиотеки, необходимо выполнить следующие действия:
\begin{enumerate}
\item Создать объект класса $Network$, соответствующий сети автоматов.
\item Создать необходимые объекты классов $Channel$, $Var$ и $Timer$, соответствующие  каналам, переменным и таймерам, общим для всех автоматов сети.
\item Для каждого автомата сети выполнить следующие действия:
	\begin{enumerate}
	\item Создать объект класса \emph{Automaton} или класса, являющегося наследником класса \emph{Automaton}.
	\item Для каждой локации автомата создать объект класса \emph{Location} или класса, являющегося наследником класса \emph{Location} (в наследнике могут быть переопределены методы $inv$ и $checkTimer$). С помощью метода $addLocation$ класса \emph{Automaton} добавить созданный объект в набор локаций автомата.
	\item Для каждого перехода автомата создать объект класса \emph{Transition} или класса, являющегося наследником класса \emph{Transition} (в наследнике могут быть переопределены методы $action$, $guard$, $synchronize$). С помощью метода $addTransition$ класса \emph{Automaton} добавить созданный объект в набор переходов автомата.
	\end{enumerate}
\item Для созданного на шаге 1 объекта класса $Network$ вызвать метод $run$.
\item На данном этапе каждый объект-автомат будет иметь набор объектов класса $АEvent$, соответствующих событиям синхронизации с участием этого автомата. Если требуется получить ВД всей сети автоматов, то для созданного на шаге 1 объекта класса $Network$ вызвать метод $buildTD$. После этого указанный объект класса $Network$ будет иметь набор объектов класса $NetEvent$, соответствующий ВД сети автоматов.
\end{enumerate}

Средствами разработанной библиотеки можно получить одну возможную ВД заданной сети автоматов. Если для сети автоматов существует несколько возможных ВД, то будет построена одна из возможных ВД. В разделе~\ref{determ} было доказано, что сети автоматов, построенные на основе предложенной обобщенной модели МВС, детерминированы. То есть для каждой такой сети автоматов верно, что ВД, построенные по всем возможным вычислениям этой сети, эквивалентны. Поэтому функциональности разработанной библиотеки достаточно для использования при решении задачи данной работы.

