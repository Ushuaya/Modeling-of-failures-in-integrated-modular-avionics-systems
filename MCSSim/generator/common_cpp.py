#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.1.0'
__CHEETAH_versionTuple__ = (3, 1, 0, 'final', 1)
__CHEETAH_genTime__ = 1586513965.009719
__CHEETAH_genTimestamp__ = 'Fri Apr 10 13:19:25 2020'
__CHEETAH_src__ = 'common_cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Apr 10 11:57:32 2020'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class common_cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(common_cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#include "common.h"

''')
        for i in VFN(VFFSL(SL,"base",True),"keys",False)(): # generated from line 3, col 1
            for a in VFFSL(SL,"base",True)[i]: # generated from line 4, col 1
                write(u'''#include "''')
                _v = VFFSL(SL,"a.name",True) # u'${a.name}' on line 5, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${a.name}')) # from line 5, col 12.
                write(u'''.h"
''')
        write(u'''

''')
        for i in VFN(VFFSL(SL,"base",True),"keys",False)(): # generated from line 10, col 1
            write(u'''void create''')
            _v = VFFSL(SL,"i",True) # u'$i' on line 11, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$i')) # from line 11, col 12.
            write(u''' (std::string type, std::string _name, Network *n, int p, bool t''')
            automaton = VFFSL(SL,"base",True)[i][0]
            for p in VFFSL(SL,"automaton.typedParams",True): # generated from line 13, col 1
                write(u''', ''')
                _v = VFFSL(SL,"p",True)[1] # u'${p[1]}' on line 14, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${p[1]}')) # from line 14, col 3.
                write(u'''* _''')
                _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 14, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 14, col 13.
            for p in VFFSL(SL,"automaton.arrayTypedParams",True): # generated from line 16, col 1
                write(u''', std::vector <''')
                _v = VFFSL(SL,"p",True)[1] # u'${p[1]}' on line 17, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${p[1]}')) # from line 17, col 16.
                write(u'''*> & _''')
                _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 17, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 17, col 29.
            for p in VFFSL(SL,"automaton.vars",True): # generated from line 19, col 1
                write(u''', Var* _''')
                _v = VFFSL(SL,"p",True) # u'$p' on line 20, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 20, col 9.
            for p in VFFSL(SL,"automaton.arrayVars",True): # generated from line 22, col 1
                write(u''', std::vector <Var*> &_''')
                _v = VFFSL(SL,"p",True) # u'$p' on line 23, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 23, col 24.
            for p in VFFSL(SL,"automaton.arrayArrayVars",True): # generated from line 25, col 1
                write(u''', std::vector < std::vector <Var*> > &_''')
                _v = VFFSL(SL,"p",True) # u'$p' on line 26, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 26, col 40.
            for p in VFFSL(SL,"automaton.chans",True): # generated from line 28, col 1
                write(u''', Channel* _''')
                _v = VFFSL(SL,"p",True) # u'$p' on line 29, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 29, col 13.
            for p in VFFSL(SL,"automaton.arrayChans",True): # generated from line 31, col 1
                write(u''', std::vector <Channel*> &_''')
                _v = VFFSL(SL,"p",True) # u'$p' on line 32, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 32, col 28.
            for p in VFFSL(SL,"automaton.timers",True): # generated from line 34, col 1
                write(u''', Timer* _''')
                _v = VFFSL(SL,"p",True) # u'$p' on line 35, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 35, col 11.
            for p in VFFSL(SL,"automaton.arrayTimers",True): # generated from line 37, col 1
                write(u''', std::vector <Timer*> &_''')
                _v = VFFSL(SL,"p",True) # u'$p' on line 38, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 38, col 26.
            write(u''')
{
''')
            for a in VFFSL(SL,"base",True)[i]: # generated from line 42, col 1
                write(u'''\tif (type == "''')
                _v = VFFSL(SL,"a.name",True) # u'$a.name' on line 43, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'$a.name')) # from line 43, col 15.
                write(u'''")
\t\tnew ''')
                _v = VFFSL(SL,"a.name",True) # u'$a.name' on line 44, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$a.name')) # from line 44, col 7.
                write(u'''::''')
                _v = VFFSL(SL,"a.name",True) # u'$a.name' on line 44, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'$a.name')) # from line 44, col 16.
                write(u''' ( _name, n, p, t''')
                for p in VFFSL(SL,"a.typedParams",True): # generated from line 45, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 46, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 46, col 4.
                for p in VFFSL(SL,"a.arrayTypedParams",True): # generated from line 48, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 49, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 49, col 4.
                for p in VFFSL(SL,"a.vars",True): # generated from line 51, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True) # u'$p' on line 52, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 52, col 4.
                for p in VFFSL(SL,"a.arrayVars",True): # generated from line 54, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True) # u'$p' on line 55, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 55, col 4.
                for p in VFFSL(SL,"a.arrayArrayVars",True): # generated from line 57, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True) # u'$p' on line 58, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 58, col 4.
                for p in VFFSL(SL,"a.chans",True): # generated from line 60, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True) # u'$p' on line 61, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 61, col 4.
                for p in VFFSL(SL,"a.arrayChans",True): # generated from line 63, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True) # u'$p' on line 64, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 64, col 4.
                for p in VFFSL(SL,"a.timers",True): # generated from line 66, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True) # u'$p' on line 67, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 67, col 4.
                for p in VFFSL(SL,"a.arrayTimers",True): # generated from line 69, col 1
                    write(u''', _''')
                    _v = VFFSL(SL,"p",True) # u'$p' on line 70, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 70, col 4.
                write(u''');

''')
            write(u'''}
''')
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_common_cpp = 'respond'

## END CLASS DEFINITION

if not hasattr(common_cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(common_cpp,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(common_cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=common_cpp()).run()


