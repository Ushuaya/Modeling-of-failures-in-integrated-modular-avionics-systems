#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.1.0'
__CHEETAH_versionTuple__ = (3, 1, 0, 'final', 1)
__CHEETAH_genTime__ = 1586513964.986862
__CHEETAH_genTimestamp__ = 'Fri Apr 10 13:19:24 2020'
__CHEETAH_src__ = 'automaton_cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Apr 10 11:57:32 2020'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class automaton_cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(automaton_cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#include "''')
        _v = VFFSL(SL,"automaton.name",True) # u'${automaton.name}' on line 1, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${automaton.name}')) # from line 1, col 12.
        write(u'''.h"

using namespace std;

namespace ''')
        _v = VFFSL(SL,"automaton.name",True) # u'${automaton.name}' on line 5, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${automaton.name}')) # from line 5, col 11.
        write(u''' {

''')
        _v = VFFSL(SL,"automaton.name",True) # u'${automaton.name}' on line 7, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${automaton.name}')) # from line 7, col 1.
        write(u'''::''')
        _v = VFFSL(SL,"automaton.name",True) # u'${automaton.name}' on line 7, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'${automaton.name}')) # from line 7, col 20.
        write(u'''(string _name, Network *n, int p, bool __t''')
        for p in VFFSL(SL,"automaton.typedParams",True): # generated from line 8, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True)[1] # u'${p[1]}' on line 9, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p[1]}')) # from line 9, col 3.
            write(u'''* _''')
            _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 9, col 13
            if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 9, col 13.
        for p in VFFSL(SL,"automaton.arrayTypedParams",True): # generated from line 11, col 1
            write(u''', vector <''')
            _v = VFFSL(SL,"p",True)[1] # u'${p[1]}' on line 12, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'${p[1]}')) # from line 12, col 11.
            write(u'''*> & _''')
            _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 12, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 12, col 24.
        for p in VFFSL(SL,"automaton.vars",True): # generated from line 14, col 1
            write(u''', Var* _''')
            _v = VFFSL(SL,"p",True) # u'$p' on line 15, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 15, col 9.
        for p in VFFSL(SL,"automaton.arrayVars",True): # generated from line 17, col 1
            write(u''', vector <Var*> &_''')
            _v = VFFSL(SL,"p",True) # u'$p' on line 18, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 18, col 19.
        for p in VFFSL(SL,"automaton.arrayArrayVars",True): # generated from line 20, col 1
            write(u''', vector < vector <Var*> > &_''')
            _v = VFFSL(SL,"p",True) # u'$p' on line 21, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 21, col 30.
        write(u'''
''')
        for p in VFFSL(SL,"automaton.chans",True): # generated from line 24, col 1
            write(u''', Channel* _''')
            _v = VFFSL(SL,"p",True) # u'$p' on line 25, col 13
            if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 25, col 13.
        for p in VFFSL(SL,"automaton.arrayChans",True): # generated from line 27, col 1
            write(u''', vector <Channel*> &_''')
            _v = VFFSL(SL,"p",True) # u'$p' on line 28, col 23
            if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 28, col 23.
        for p in VFFSL(SL,"automaton.timers",True): # generated from line 30, col 1
            write(u''', Timer* _''')
            _v = VFFSL(SL,"p",True) # u'$p' on line 31, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 31, col 11.
        for p in VFFSL(SL,"automaton.arrayTimers",True): # generated from line 33, col 1
            write(u''', vector <Timer*> &_''')
            _v = VFFSL(SL,"p",True) # u'$p' on line 34, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 34, col 21.
        write(u'''
): Automaton(n, _name, p, __t)''')
        for p in VFFSL(SL,"automaton.typedParams",True): # generated from line 38, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 39, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 39, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 39, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 39, col 12.
            write(u''')''')
        for p in VFFSL(SL,"automaton.arrayTypedParams",True): # generated from line 41, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 42, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 42, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True)[0] # u'${p[0]}' on line 42, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${p[0]}')) # from line 42, col 12.
            write(u''')''')
        for p in VFFSL(SL,"automaton.vars",True): # generated from line 44, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 45, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 45, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 45, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 45, col 9.
            write(u''')''')
        for p in VFFSL(SL,"automaton.arrayVars",True): # generated from line 47, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 48, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 48, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 48, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 48, col 9.
            write(u''')''')
        for p in VFFSL(SL,"automaton.arrayArrayVars",True): # generated from line 50, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 51, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 51, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 51, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 51, col 9.
            write(u''')''')
        for p in VFFSL(SL,"automaton.chans",True): # generated from line 53, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 54, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 54, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 54, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 54, col 9.
            write(u''')''')
        for p in VFFSL(SL,"automaton.arrayChans",True): # generated from line 56, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 57, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 57, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 57, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 57, col 9.
            write(u''')''')
        for p in VFFSL(SL,"automaton.timers",True): # generated from line 59, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 60, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 60, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 60, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 60, col 9.
            write(u''')''')
        for p in VFFSL(SL,"automaton.arrayTimers",True): # generated from line 62, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 63, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 63, col 3.
            write(u'''(_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 63, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 63, col 9.
            write(u''')''')
        for p in VFFSL(SL,"automaton.localVars",True): # generated from line 65, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 66, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 66, col 3.
            write(u'''(n, "''')
            _v = VFFSL(SL,"automaton.name",True) # u'${automaton.name}' on line 66, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.name}')) # from line 66, col 12.
            write(u'''_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 66, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 66, col 30.
            write(u'''")''')
        for p in VFFSL(SL,"automaton.localClocks",True): # generated from line 68, col 1
            write(u''', ''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 69, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 69, col 3.
            write(u'''(n, "''')
            _v = VFFSL(SL,"automaton.name",True) # u'${automaton.name}' on line 69, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.name}')) # from line 69, col 12.
            write(u'''_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 69, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 69, col 30.
            write(u'''")''')
        write(u'''


{
''')
        for s in VFN(VFFSL(SL,"automaton.states",True),"values",False)(): # generated from line 75, col 1
            write(u'''\t''')
            _v = VFFSL(SL,"s.name",True) # u'$s.name' on line 76, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'$s.name')) # from line 76, col 2.
            write(u'''* ''')
            _v = VFN(VFFSL(SL,"s.name",True),"lower",False)() # u'${s.name.lower()}' on line 76, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'${s.name.lower()}')) # from line 76, col 11.
            write(u''' = new ''')
            _v = VFFSL(SL,"s.name",True) # u'$s.name' on line 76, col 35
            if _v is not None: write(_filter(_v, rawExpr=u'$s.name')) # from line 76, col 35.
            write(u''' (n, "''')
            _v = VFFSL(SL,"s.name",True) # u'$s.name' on line 76, col 48
            if _v is not None: write(_filter(_v, rawExpr=u'$s.name')) # from line 76, col 48.
            write(u'''", ''')
            if VFFSL(SL,"s.id",True) == VFFSL(SL,"automaton.init",True) : # generated from line 76, col 58
                _v =  "true" 
                if _v is not None: write(_filter(_v))
            else:
                _v =  "false"
                if _v is not None: write(_filter(_v))
            write(u''', ''')
            _v = VFFSL(SL,"s.committed",True) # u'$s.committed' on line 76, col 114
            if _v is not None: write(_filter(_v, rawExpr=u'$s.committed')) # from line 76, col 114.
            write(u''', this);
\taddLocation(''')
            _v = VFN(VFFSL(SL,"s.name",True),"lower",False)() # u'${s.name.lower()}' on line 77, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'${s.name.lower()}')) # from line 77, col 14.
            write(u''');
''')
        write(u'''
''')
        tnum = 0
        VFN(VFFSL(SL,"automaton.transitions",True),"sort",False)(key=lambda x: x.channel_prio)
        for t in VFFSL(SL,"automaton.transitions",True): # generated from line 82, col 1
            write(u'''\t''')
            _v = VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.src",True)],"name",True) # u'${automaton.states[$t.src].name}' on line 83, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.src].name}')) # from line 83, col 2.
            write(u'''_''')
            _v = VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.dst",True)],"name",True) # u'${automaton.states[$t.dst].name}' on line 83, col 35
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.dst].name}')) # from line 83, col 35.
            write(u'''_''')
            _v = VFFSL(SL,"tnum",True) # u'$tnum' on line 83, col 68
            if _v is not None: write(_filter(_v, rawExpr=u'$tnum')) # from line 83, col 68.
            write(u''' *''')
            _v = VFN(VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.src",True)],"name",True),"lower",False)() # u'${automaton.states[$t.src].name.lower()}' on line 83, col 75
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.src].name.lower()}')) # from line 83, col 75.
            write(u'''_''')
            _v = VFN(VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.dst",True)],"name",True),"lower",False)() # u'${automaton.states[$t.dst].name.lower()}' on line 83, col 116
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.dst].name.lower()}')) # from line 83, col 116.
            write(u'''_''')
            _v = VFFSL(SL,"tnum",True) # u'$tnum' on line 83, col 157
            if _v is not None: write(_filter(_v, rawExpr=u'$tnum')) # from line 83, col 157.
            write(u''' = new ''')
            _v = VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.src",True)],"name",True) # u'${automaton.states[$t.src].name}' on line 83, col 169
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.src].name}')) # from line 83, col 169.
            write(u'''_''')
            _v = VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.dst",True)],"name",True) # u'${automaton.states[$t.dst].name}' on line 83, col 202
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.dst].name}')) # from line 83, col 202.
            write(u'''_''')
            _v = VFFSL(SL,"tnum",True) # u'$tnum' on line 83, col 235
            if _v is not None: write(_filter(_v, rawExpr=u'$tnum')) # from line 83, col 235.
            write(u''' (n, ''')
            _v = VFN(VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.dst",True)],"name",True),"lower",False)() # u'${automaton.states[$t.dst].name.lower()}' on line 83, col 245
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.dst].name.lower()}')) # from line 83, col 245.
            write(u''', this);
\t''')
            _v = VFN(VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.src",True)],"name",True),"lower",False)() # u'${automaton.states[$t.src].name.lower()}' on line 84, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.src].name.lower()}')) # from line 84, col 2.
            write(u'''->addTransition(''')
            _v = VFN(VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.src",True)],"name",True),"lower",False)() # u'${automaton.states[$t.src].name.lower()}' on line 84, col 58
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.src].name.lower()}')) # from line 84, col 58.
            write(u'''_''')
            _v = VFN(VFN(VFN(VFFSL(SL,"automaton",True),"states",True)[VFFSL(SL,"t.dst",True)],"name",True),"lower",False)() # u'${automaton.states[$t.dst].name.lower()}' on line 84, col 99
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.states[$t.dst].name.lower()}')) # from line 84, col 99.
            write(u'''_''')
            _v = VFFSL(SL,"tnum",True) # u'$tnum' on line 84, col 140
            if _v is not None: write(_filter(_v, rawExpr=u'$tnum')) # from line 84, col 140.
            write(u''');
''')
            tnum = VFFSL(SL,"tnum",True) + 1
        write(u'''
\tautomaton = this;
''')
        for p in VFFSL(SL,"automaton.localClocks",True): # generated from line 89, col 1
            write(u'''\tautomaton->timers.push_back(&''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 90, col 31
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 90, col 31.
            write(u''');
''')
        write(u'''
''')
        for p in VFN(VFFSL(SL,"automaton.localArrayClocks",True),"keys",False)(): # generated from line 93, col 1
            write(u'''\tfor (unsigned i=0; i< ''')
            _v = VFN(VFFSL(SL,"automaton",True),"localArrayClocks",True)[p] # u'${automaton.localArrayClocks[p]}' on line 94, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.localArrayClocks[p]}')) # from line 94, col 24.
            write(u''' ; i++) {
\t\tTimer* _t=new Timer(n, "''')
            _v = VFFSL(SL,"automaton.name",True) # u'${automaton.name}' on line 95, col 27
            if _v is not None: write(_filter(_v, rawExpr=u'${automaton.name}')) # from line 95, col 27.
            write(u'''_''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 95, col 45
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 95, col 45.
            write(u'''");
\t\t''')
            _v = VFFSL(SL,"p",True) # u'${p}' on line 96, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${p}')) # from line 96, col 3.
            write(u'''.push_back(_t);
\t\tautomaton->timers.push_back(_t);
\t}
''')
        write(u'''
}

}

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_automaton_cpp = 'respond'

## END CLASS DEFINITION

if not hasattr(automaton_cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(automaton_cpp,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(automaton_cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=automaton_cpp()).run()


